{"version":3,"sources":["components/StyledComponents.js","components/PlayerSelect.js","components/Winner.js","components/Play.js","App.js","serviceWorker.js","index.js"],"names":["Square","styled","button","_templateObject","props","primary","Row","div","_templateObject2","Button","_templateObject3","ArrowBack","_templateObject4","MainGameBoard","_templateObject5","Player","_templateObject6","PlayerName","input","_templateObject7","PlayerSelect","react_default","a","createElement","style","flexDirection","color","fontSize","placeholder","onChange","onChangePlayerOne","value","playerOne","react_router_dom","to","textDecoration","fontWeight","marginTop","onChangePlayerTwo","playerTwo","WinnerGameBoard","Winner_templateObject","WinnerContent","Winner_templateObject2","Winner","className","player","winnerStatus","onClick","reset","playAgain","Play","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","xWinCount","oWinCount","concat","winnerFound","components_Winner","xWin","oWin","width","renderSquare","Component","App","_this","state","board","_playAgain","bind","assertThisInitialized","_reset","_renderSquare","_checkWinner","_playerTurn","_winCount","_onChangePlayerOne","_onChangePlayerTwo","i","_this2","setState","lines","length","_lines$i","slicedToArray","b","c","indexOf","Array","fill","e","target","_this3","react_router","exact","path","render","components_PlayerSelect","components_Play","playe","Boolean","window","location","hostname","match","ReactDOM","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d63ffbee.chunk.js","sourcesContent":["import React from 'react'\r\nimport styled from 'styled-components'\r\n\r\nconst Square = styled.button`\r\n  border: none;\r\n  outline: none;\r\n  width: 170px;\r\n  height: 170px;\r\n  padding: 10px;\r\n  font-family: 'Yantramanav';\r\n  font-weight: 900;\r\n  font-size: 70px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: #333;\r\n  margin: 5px;\r\n  color: ${props => props.primary ? '#68EDC6' : '#EF626C'};\r\n  transition: .3s;\r\n  &:hover{\r\n    transition: .3s;\r\n    background-color: white;\r\n    cursor: pointer;\r\n  }\r\n`\r\n\r\nconst Row = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  flex-direction: row;\r\n`\r\n\r\nconst Button = styled.button`\r\n  background-color: #68EDC6;\r\n  color: white;\r\n  border: none;\r\n  outline: none;\r\n  padding: 20px;\r\n  border-radius: 5px;\r\n  width: 220px;\r\n  font-size: 30px;\r\n  font-family: 'Yantramanav';\r\n  cursor: pointer;\r\n`\r\n\r\nconst ArrowBack = styled.button`\r\n  position: absolute;\r\n  outline: none;\r\n  border: none;\r\n  background-color: transparent;\r\n  padding: 5px;\r\n  font-size: 20px;\r\n  font-weight: 100;\r\n  color: #EF626C;\r\n  opacity: .5;\r\n  top: 20px;\r\n  left: 20px;\r\n  transition: .3s;\r\n  &:hover {\r\n    opacity: 1;\r\n    transition: .3s;\r\n  }\r\n`\r\n\r\nconst MainGameBoard = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  width: 100%;\r\n  height: 100vh;\r\n  background-color: #EFF6EE;\r\n  justify-content: center;\r\n  align-items: center;\r\n`\r\nconst Player = styled.div`\r\n  width: 100%;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n`\r\n\r\nconst PlayerName = styled.input`\r\n  outline: none;\r\n  border: none;\r\n  width: 300px;\r\n  height: 30px;\r\n  padding: 20px;\r\n  margin: 30px;\r\n`\r\n\r\nexport { Square, Row, MainGameBoard, Player, PlayerName, Button, ArrowBack }","import React from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport { MainGameBoard, PlayerName, Player } from './StyledComponents'\r\n\r\n\r\n\r\nconst PlayerSelect = (props) => (\r\n  <MainGameBoard style={{ flexDirection: \"row\" }}>\r\n    <Player>\r\n      <h1 style={{ color: \"#68EDC6\", fontSize: \"60px\" }}>x</h1>\r\n      <PlayerName\r\n        placeholder=\"Enter name for x...\"\r\n        onChange={props.onChangePlayerOne}\r\n        value={props.playerOne} />\r\n    </Player>\r\n    <Link to=\"/play\" style={{ textDecoration: \"none\", color: \"#333\", fontSize: \"50px\", fontWeight: \"900\", marginTop: \"75px\" }}>Play</Link>\r\n    <Player>\r\n      <h1 style={{ color: \"#EF626C\", fontSize: \"60px\" }}>o</h1>\r\n      <PlayerName\r\n        placeholder=\"Enter name for o...\"\r\n        onChange={props.onChangePlayerTwo}\r\n        value={props.playerTwo} />\r\n    </Player>\r\n  </MainGameBoard>\r\n)\r\n\r\nexport default PlayerSelect","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { MainGameBoard, Button } from './StyledComponents'\r\n\r\n\r\nconst WinnerGameBoard = styled(MainGameBoard)`\r\n  background-color: #EFF6EE;\r\n  position: absolute;\r\n  `\r\n\r\nconst WinnerContent = styled.div`\r\n  display: flex;\r\n  width: 100%;\r\n  height: auto;\r\n  justify-content: center;\r\n  align-items: center;\r\n  flex-direction: column;\r\n  font-weight: 100;\r\n  font-size: 90px;\r\n  color: #333;\r\n`\r\n\r\n\r\nconst Winner = (props) => (\r\n  <div className=\"Winner\">\r\n    <WinnerGameBoard>\r\n      {\r\n      props.player === 'x' ?\r\n        <WinnerContent>\r\n          <h1>{props.winnerStatus}</h1>\r\n          <Button onClick={props.reset}>Play again</Button>\r\n        </WinnerContent>\r\n      :\r\n        <WinnerContent>\r\n          <h1>{props.winnerStatus}</h1>\r\n          <Button onClick={props.playAgain}>Play again</Button>\r\n        </WinnerContent>\r\n      }\r\n    </WinnerGameBoard>\r\n  </div>\r\n)\r\n\r\nexport default Winner","import React, { Component } from 'react'\r\nimport { Link } from \"react-router-dom\"\r\nimport { MainGameBoard, Row, Player, ArrowBack } from './StyledComponents'\r\nimport Winner from './Winner'\r\nimport '../App.css'\r\n\r\nclass Play extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n  }\r\n\r\n  render() {\r\n    const xWinCount = this.props.xWinCount\r\n    const oWinCount = this.props.oWinCount\r\n    const winnerStatus = `${this.props.player} wins!`\r\n    return (\r\n      <div className=\"App\">\r\n        {\r\n          this.props.winnerFound ?\r\n            <Winner\r\n              winnerStatus={this.props.winnerStatus}\r\n              xWin={this.props.xWinCount}\r\n              oWin={this.props.oWinCount}\r\n              playAgain={this.props.playAgain}\r\n            />\r\n            : null\r\n        }\r\n        <MainGameBoard style={{ flexDirection: \"row\" }}>\r\n          <ArrowBack onClick={this.props.reset}><Link to=\"/\" style={{color: '#EF626C', textDecoration: \"none\"}}>Back</Link></ArrowBack>\r\n          <Player>\r\n            <h1 style={{ color: '#68EDC6' }}>{this.props.playerOne}</h1>\r\n            <h1>{xWinCount}</h1>\r\n          </Player>\r\n          <div style={{ width: \"auto\" }}>\r\n            <Row>\r\n              {this.props.renderSquare(0)}\r\n              {this.props.renderSquare(1)}\r\n              {this.props.renderSquare(2)}\r\n            </Row>\r\n            <Row>\r\n              {this.props.renderSquare(3)}\r\n              {this.props.renderSquare(4)}\r\n              {this.props.renderSquare(5)}\r\n            </Row>\r\n            <Row>\r\n              {this.props.renderSquare(6)}\r\n              {this.props.renderSquare(7)}\r\n              {this.props.renderSquare(8)}\r\n            </Row>\r\n          </div>\r\n          <Player>\r\n            <h1 style={{ color: '#EF626C' }}>{this.props.playerTwo}</h1>\r\n            <h1>{oWinCount}</h1>\r\n          </Player>\r\n        </MainGameBoard>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Play","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Route } from \"react-router-dom\"\nimport PlayerSelect from './components/PlayerSelect'\nimport Play from './components/Play'\nimport { Square } from './components/StyledComponents'\n\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      playerOne: '',\n      playerTwo: '',\n      player: 'x',\n      board: [\n        '', '', '',\n        '', '', '',\n        '', '', ''\n      ],\n      winnerFound: false,\n      xWinCount: 0,\n      oWinCount: 0,\n\n    }\n    this._playAgain = this._playAgain.bind(this)\n    this._reset = this._reset.bind(this)\n    this._renderSquare = this._renderSquare.bind(this)\n    this._checkWinner = this._checkWinner.bind(this)\n    this._playerTurn = this._playerTurn.bind(this)\n    this._winCount = this._winCount.bind(this)\n    this._playAgain = this._playAgain.bind(this)\n    this._onChangePlayerOne = this._onChangePlayerOne.bind(this)\n    this._onChangePlayerTwo = this._onChangePlayerTwo.bind(this)\n  }\n\n  _renderSquare(i) {\n    const board = this.state.board\n    if (board[i] === 'x') {\n      return <Square\n        primary\n        onClick={() => {\n          if (!this.state.winnerFound) {\n            this._playerTurn(i)\n          }\n        }}>\n        {this.state.board[i]}\n      </Square>\n    } else {\n      return <Square\n        onClick={() => {\n          if (!this.state.winnerFound) {\n            this._playerTurn(i)\n          }\n        }}>\n        {this.state.board[i]}\n      </Square>\n    }\n  }\n\n  _playerTurn(i) {\n    let player = this.state.player\n    const board = this.state.board\n    if (board[i] === '') {\n      board[i] = player\n    } else {\n      return\n    }\n    if (player === 'x') {\n      player = 'o'\n    } else {\n      player = 'x'\n    }\n    this._checkWinner()\n    this.setState({ board, player })\n  }\n\n  _checkWinner() {\n    const board = this.state.board\n    let winnerStatus = this.state.winnerStatus\n    let winnerFound = this.state.winnerFound\n    const player = this.state.player\n    const lines = [\n      [0, 1, 2],\n      [3, 4, 5],\n      [6, 7, 8],\n      [0, 3, 6],\n      [1, 4, 7],\n      [2, 5, 8],\n      [0, 4, 8],\n      [2, 4, 6]\n    ];\n    if (!winnerFound) {\n      for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (board[a] && board[a] === board[b] && board[a] === board[c]) {\n          winnerFound = !winnerFound\n          winnerStatus = `${player} wins!`\n          this._winCount(player)\n        }\n      }\n    }\n    if (!winnerFound && board.indexOf('') < 0) {\n      winnerFound = !winnerFound\n      winnerStatus = 'Draw!'\n    }\n    this.setState({ winnerFound, winnerStatus })\n  }\n\n  _winCount(player) {\n    let xWinCount = this.state.xWinCount\n    let oWinCount = this.state.oWinCount\n    if (player === 'x') {\n      xWinCount++\n    } else if (player === 'o') {\n      oWinCount++\n    } else {\n      return\n    }\n    this.setState({ xWinCount, oWinCount })\n  }\n\n  _playAgain() {\n    this.setState({ board: Array(9).fill(''), winnerFound: !this.state.winnerFound, player: 'x' })\n  }\n\n  _onChangePlayerOne(e) {\n    this.setState({ playerOne: e.target.value })\n  }\n\n  _onChangePlayerTwo(e) {\n    this.setState({ playerTwo: e.target.value })\n  }\n\n  _reset() {\n    this.setState({ playerOne: '', playerTwo: '', xWinCount: 0, oWinCount: 0})\n  }\n\n  render() {\n    return (\n      <Router >\n        <Route exact path=\"/\"\n          render={() => <PlayerSelect\n            onChangePlayerOne={this._onChangePlayerOne}\n            onChangePlayerTwo={this._onChangePlayerTwo}\n            playerOne={this.state.playerOne}\n            playerTwo={this.state.playerTwo} />}\n        />\n        <Route path='/TicTacToe/play' render={() =>\n          <Play\n            playerOne={this.state.playerOne}\n            playerTwo={this.state.playerTwo}\n            player={this.state.playe}\n            board={this.state.board}\n            winnerFound={this.state.winnerFound}\n            winnerStatus={this.state.winnerStatus}\n            xWinCount={this.state.xWinCount}\n            oWinCount={this.state.oWinCount}\n\n            renderSquare={this._renderSquare}\n            playAgain={this._playAgain}\n            reset={this._reset}\n          />\n        } />\n      </Router>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}